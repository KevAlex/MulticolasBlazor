@page "/"
@using Multicolas.Logica
@using Multicolas.Logica.General
@using Multicolas.Logica.RoundRobin
@using Multicolas.Logica.FCFS
@using Multicolas.Logica.SJF
<PageTitle>Index</PageTitle>

<div class="alert alert-info" role="alert" style="text-align:center; height:70px">
    <h3>Algoritmo Round Robin / Multicolas</h3>
</div>

<div style="text-align:center; ">
    <button type="button" class="btn btn-primary" @onclick="IniciarBloque">Agregar procesos</button>
    <button type="button" class="btn btn-success" @onclick="IniciarEjecucion">Expedir procesos</button>
    <button type="button" class="btn btn-primary" @onclick="AgregarRR">Agregar proceso a RR</button>
    <button type="button" class="btn btn-danger" @onclick="Bloquear">Bloquear proceso</button>
    @*<button @onclick="Reinicio">Reiniciar</button>*@


</div>

<br />



<div style="text-align:center">
    @if (EstadoInicial.Semaforo == false)
    {
        <p style="color:green"> (Semaforo) Sección critica libre</p>
    }
    else
    {
        <p style="color:red">(Semaforo) Sección critica ocupada</p>

    }

    <p style="color:blue">Quantum de tiempo (incluyendo el cero): quantum </p>

</div>


<br />
<br />



<div class="container">
    <div class=row>
        <div class="col">
            @if (EstadoInicial.ProcesosListos.Any())
            {
                <TablaComponent Items=EstadoInicial.ProcesosListos>
                    <TableHeader>
                        <th>Proceso</th>
                        <th>Tiempo Llegada</th>
                        <th>Rafaga</th>
                        <th>Tiempo Comienzo</th>
                        <th>Tiempo Final</th>
                        <th>Tiempo Retorno</th>
                        <th>Tiempo Espera</th>
                    </TableHeader>
                    <RowTemplate>
                        <td style="border: 1px solid #ddd">
                            @context.Name
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.TiempoLlegada
                        </td>
                        <td style="border: 1px solid #ddd">

                            @if (@context.RafagaH.Any())
                            {
                                foreach (var item in context.RafagaH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.RafagaTemporal
                            }
                    </td>
                    <td style="border: 1px solid #ddd">

                        @if (@context.TiempoComienzoH.Any())
                            {
                                foreach (var item in context.TiempoComienzoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoComienzo
                            }
                    </td>
                    <td style="border: 1px solid #ddd">

                        @if (@context.TiempoFinalH.Any())
                            {
                                foreach (var item in context.TiempoFinalH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoFinal
                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.RetornoH.Any())
                            {
                                foreach (var item in context.RetornoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoRetorno

                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.EsperaH.Any())
                            {
                                foreach (var item in context.EsperaH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoEspera

                            }
                    </td>
                </RowTemplate>
            </TablaComponent>

            }
            else
            {
                @*<p style="text-align:center">No hay más procesos en el estado Listo</p>*@
                <div class="alert alert-danger" role="alert" style="text-align:center">
                    No hay procesos en el estado Listo
                </div>
            }

        </div>

        <div class="col">
            @if (EstadoInicial.FinalProceso.Any())
            {

                <TablaComponent Items="EstadoInicial.FinalProceso">
                    <TableHeader>
                        <th>Proceso..</th>
                        <th>T. Llegada</th>
                        <th>Rafaga</th>
                        <th>Tiempo Comienzo</th>
                        <th>Tiempo Final</th>
                        <th>Tiempo Retorno</th>
                        <th>Tiempo Espera</th>
                    </TableHeader>
                    <RowTemplate>
                        <td style="border: 1px solid #ddd">
                            @context.Name
                        </td>
                        <td style="border: 1px solid #ddd">

                            @context.TiempoLlegada
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.Rafaga
                        </td>
                        <td style="border: 1px solid #ddd">

                            @if (@context.TiempoComienzoH.Any())
                            {
                                foreach (var item in context.TiempoComienzoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoComienzo
                            }
                    </td>
                    <td style="border: 1px solid #ddd">

                        @if (@context.TiempoFinalH.Any())
                            {
                                foreach (var item in context.TiempoFinalH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoFinal
                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.RetornoH.Any())
                            {
                                foreach (var item in context.RetornoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoRetorno

                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.EsperaH.Any())
                            {
                                foreach (var item in context.EsperaH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoEspera

                            }
                    </td>
                </RowTemplate>
            </TablaComponent>
            }
            else
            {
                @*<p style="text-align:center">No hay procesos finalizados aun</p>*@
                <div class="alert alert-danger" role="alert" style="text-align:center">
                    No hay procesos finalizados aún
                </div>
            }

        </div>
    </div>
</div>


<div class="alert alert-primary" role="alert" style="text-align:center; height:55px">
    Diagrama de Gannt
</div>
@*Dibujando los numeros*@
@for (var i = 0; i < 51; i++)
{
    <div style="position:relative; display:inline; left:@(i*20+22)px; ">
        <p style="display:inline; font-size:12px">@i</p>
    </div>

}
@*Dibujando las lineas verticales*@
<div style="margin-left:10px">
    @for (var i = 0; i < 73; i++)
    {
        <div style="position:relative;  display:inline; left:@(i*20+20)px; width:20px; border: 1px solid black"></div>

    }
</div>

@*//Linea*@
<br />

<div style="position:relative; display:inline width:@(EstadoInicial.TiempoGlobal*20)px; border: 1px solid black"></div>

<br />



@*// Dibujando los cuadrados*@

@foreach (var proc in procesoUIs)
{
    int index = procesoUIs.IndexOf(proc);

    @if (index == 0)
    {
        // Dibujo el mismo proceso en ejecucion
        <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=proc.Posicion />
        poscTemp = 0.0;
    }
    else
    {

        aux = 1;
        @if (procesoUIs[(index - aux)].Id == proc.Id && poscTemp == 0.0)
        {
            // Dibujo el mismo proceso en ejecucion
            <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=proc.Posicion />
        }

        else
        {
            poscTemp = proc.Posicion + 0.3;
            @if (procesoUIs[(index - aux)].Id == proc.Id)
            {
                // Dibujo el mismo proceso en ejecucion
                <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=poscTemp />
            }
            else
            {

                <br />
                // Dibujo el nuevo proceso en ejecucion
                <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=poscTemp />
                @*<ProcesoUI Id=@proc.Id Color="gray" Posicion=proc.Posicion-1/>*@
            }
        }


    }


}
@*// Dibujando los tiempos de espera*@
@foreach (var anulado in EstadoInicial.ProcesosListos)
{
    if ((anulado.TiempoLlegada < EstadoInicial.TiempoGlobal) && (anulado.TiempoComienzo < EstadoInicial.TiempoGlobal))
    {
        <br />
        <ProcesoUI Color="gray" Posicion=EstadoInicial.TiempoGlobal Id=@anulado.Name />
    }
}

@foreach (var anulado in EstadoInicial.ProcesosListosFO)
{
    if ((anulado.TiempoLlegada < EstadoInicial.TiempoGlobal) && (anulado.TiempoComienzo < EstadoInicial.TiempoGlobal))
    {
        <br />
        <ProcesoUI Color="gray" Posicion=EstadoInicial.TiempoGlobal Id=@anulado.Name />
    }
}
<br />
<br />



@code {

    Queue<Proceso> UiList = new Queue<Proceso>();
    Proceso procesoUi = new Proceso();
    List<int> rafagas = new List<int>();
    List<int> tiempoUi = new List<int>();
    List<ProcesoUI> procesoUIs = new List<ProcesoUI>();
    private int aux = 0;
    private double poscTemp = 0.0;
    private RoundRobin roundRobin = new RoundRobin();
    private FCFS fcfs = new FCFS();
    private SJF sjf = new SJF();
    private BloqueInicial bloqueInicial;



    protected override async Task OnInitializedAsync()
    {
        EstadoInicial.Semaforo = false;
        bloqueInicial = new BloqueInicial();
        procesoUIs = EstadoInicial.ProcesoGrafico;
        await ActualizarUI();
        await base.OnInitializedAsync();
    }

    public async Task ActualizarUI(CancellationToken token = default(CancellationToken))
    {
        while (!token.IsCancellationRequested)
        {
            this.StateHasChanged();
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(1), token);
            }
            catch (TaskCanceledException)
            {
                break;
            }
        }
    }

    public async Task IniciarEjecucion()
    {

        //EstadoInicial.InicialProceso.Add(new Proceso { Name = "A", Rafaga = 1, TiempoLlegada = 3 });
        //EstadoInicial.InicialProceso.Add(new Proceso { Name = "b", Rafaga = 3, TiempoLlegada = 2 });
        //EstadoInicial.InicialProceso.Add(new Proceso { Name = "c", Rafaga = 4, TiempoLlegada = 1 });
        //EstadoInicial.InicialProceso.Add(new Proceso { Name = "d", Rafaga = 2, TiempoLlegada = 0 });
        
        // Revisar esto!!!!
        //int tiempoLLegada = EstadoInicial.InicialProceso.LastOrDefault().TiempoLlegada;

        // Solo para RoundRobin y SJF
        //EstadoInicial.ProcesosListos = EstadoInicial.OrganizarLista(EstadoInicial.InicialProceso);

        // Al llamar un algoritmo usar: await xxx.Iniciar

        while (EstadoInicial.ProcesosListos.Count > 0)
        {
            Proceso procesoSiguiente = EstadoInicial.ProcesosListos.Dequeue();
            //Proceso procesoDibujar = await sjf.IniciarSJF(procesoSiguiente);
            //Proceso procesoDibujar = await fcfs.IniciarFCFS(procesoSiguiente);
            Proceso procesoDibujar = await roundRobin.IniciaRoundRobin(procesoSiguiente);
            StateHasChanged();

            tiempoUi.Add(EstadoInicial.TiempoGlobal);
            rafagas.Add(EstadoInicial.TiempoGlobal);
            tiempoUi.Add(EstadoInicial.TiempoGlobal);
        }

        //
        //int tiempoLLegada = EstadoInicial.FinalProceso.LastOrDefault().TiempoLlegada;
        EstadoInicial.NuevoProceso = false;

        //EstadoInicial.ProcesosListosFO.Enqueue(new Proceso { Name = "j", Rafaga = 3, TiempoLlegada = tiempoLLegada + 1, RafagaTemporal = 3 });
        //EstadoInicial.ProcesosListosFO.Enqueue(new Proceso { Name = "k", Rafaga = 3, TiempoLlegada = tiempoLLegada + 2, RafagaTemporal = 3 });
        //EstadoInicial.ProcesosListosFO.Enqueue(new Proceso { Name = "l", Rafaga = 2, TiempoLlegada = tiempoLLegada + 3, RafagaTemporal = 2 });

        if ((EstadoInicial.ProcesosListos.Count == 0) && (EstadoInicial.ProcesosListosFO.Count > 0))
        {
            while ((EstadoInicial.ProcesosListosFO.Count > 0) && (EstadoInicial.NuevoProceso == false))
            {
                Proceso procesoSiguiente = EstadoInicial.ProcesosListosFO.Dequeue();
                await fcfs.IniciarFCFS(procesoSiguiente);
            }

        }
        else if (EstadoInicial.NuevoProceso == false)
        {
            if ((EstadoInicial.ProcesosListosFO.Count == 0) && (EstadoInicial.ProcesosListosSJF.Count > 0))
            {
                while ((EstadoInicial.ProcesosListosSJF.Count > 0) && (EstadoInicial.NuevoProceso == false))
                {
                    Proceso procesoSiguiente = EstadoInicial.ProcesosListosSJF.Dequeue();
                    //SJF.iniciar
                }
            }
        }

    }

    public async Task AgregarRR()
    {
        EstadoInicial.NuevoProceso = true;
     // Revisar valor del contador
        await bloqueInicial.AgregarNuevoProceso();

    }

    public async Task AgregarFO()
    {
        EstadoInicial.NuevoProceso = true;
        await bloqueInicial.AgregarNuevoProcesoFO();
    }

    public async Task AgregarSJF()
    {
        EstadoInicial.NuevoProceso = true;
        //await bloqueControl.AgregarNuevoProceso();
    }
    public async Task Bloquear()
    {
        //await bloqueControl.AgregarProcesoInicial();
    }


    public async Task IniciarBloque()
    {
        //await bloqueControl.AgregarProcesoInicial();
        // Lineas Solo de prueba
        EstadoInicial.ProcesosListosFO.Enqueue(new Proceso { Name = "j", Rafaga = 3, TiempoLlegada =  1, RafagaTemporal = 3 });
        EstadoInicial.ProcesosListosFO.Enqueue(new Proceso { Name = "k", Rafaga = 3, TiempoLlegada = 2, RafagaTemporal = 3 });
        EstadoInicial.ProcesosListosFO.Enqueue(new Proceso { Name = "l", Rafaga = 2, TiempoLlegada = 3, RafagaTemporal = 2 });

        await bloqueInicial.AgregarProcesoInicial();

    }

    public async Task Reinicio()
    {
        //EstadoInicial.ProcesosListos.Clear();
        //EstadoInicial.ListaEjecucion.Clear();
        //EstadoInicial.FinalProceso.Clear();

    }



    @*   @*// Dibujando el nombre del proceso en ejecucion*
        if (EstadoInicial.ListaEjecucion.Any())
        {
        foreach (var eje in EstadoInicial.ListaEjecucion)
        {
        @*<p style="display:inline; color:green">Proceso en ejecucion: @eje.Name</p>*@

    @* <div class="alert alert-success" role="alert" style="height:55px; text-align:center ">
        Proceso en ejecucion: @eje.Name
        </div>*
        }
        }

        @*// Dibujando el nombre del proceso en espera
        @foreach (var anulado in EstadoInicial.ProcesosListos)
        {
        if ((anulado.TiempoLlegada <= EstadoInicial.TiempoGlobal) && (anulado.TiempoComienzo < EstadoInicial.TiempoGlobal))
        {
        @*<p style="color:gray">Proceso(s) en espera: @anulado.Name</p>*@

    @*<div class="alert alert-dark" role="alert" style="height:55px; text-align:center">
        Proceso en espera: @anulado.Name
        </div>
        }
        }*@
}

